#Tx[111]<-Lx[111]
#for(i in 110:1){Tx[i]<-Lx[i]+T[i+1]}
Tx[1]<- sum(Lx)
for(i in 2:111){Tx[i]<-Tx[i-1]-Lx[i-1]}
ex<-Tx/lx
Sx<-vector(length=111)
Sx[1]<-Lx[1]/(2*lx[1])
Sx[111]<-Tx[111]/Tx[110]
for(i in 2:110){
Sx[i]=Lx[i]/Lx[i-1]
}
ex[is.nan(ex)]<-0
tabmort<-cbind(c(0:110),mx,qx,px,lx,dx,Lx,Tx,ex,Sx)
return(tabmort)
}
tablamort<-function(a,s){
Dx<- read.table("Deaths_1x1.txt", header=TRUE)
Ex<- read.table("Exposures_1x1.txt", header=TRUE)
D_x<-Dx[which(Dx$Year==a),c(1,2,s)]
E_x<-Ex[which(Ex$Year==a),c(1,2,s)]
#Dx<- read.table("Deaths_1x1.txt", header=TRUE)[(111*(a-1946)-110):(111*(a-1946)),s]
#Ex<- read.table("Exposures_1x1.txt", header=TRUE)[(111*(a-1946)-110):(111*(a-1946)),s]
mx<-D_x[,3]/E_x[,3]
mx[is.nan(mx)]<-0
qx<-2*mx/(2+mx)
for(i in 1:111){if(qx[i]>1){qx[i]<-1}}
if(s==3){
if (mx[1]>=0.107){qx[1]<-mx[1]/(1+(1-0.35)*mx[1])}
else {qx[1]<-(mx[1]/(1+((1-(0.053+(2.8*mx[1])))*mx[1])))}
}
else{
if (mx[1]>=0.107){qx[1]<-mx[1]/(1+(1-0.33)*mx[1])}
else {qx[1]<-mx[1]/(1+(1-(0.045+2.684*mx[1]))*mx[1])}
}
px<-1-qx
lx<-vector(length=length(px))
lx[1]<-100000
for(i in 2:111){
lx[i]<-lx[i-1]*px[i]
}
dx<-lx*qx
Lx<- vector(length=length(px))
if(s==3){
if (mx[1]>=0.107){
Lx[1]<-lx[2]+(0.35*dx[1])
} else{
Lx[1]<-lx[2]+(0.053+2.8*mx[1])*dx[1]
}
}
else{
if (mx[1]>=0.107){
Lx[1]<-lx[2]+(0.33*dx[1])
} else{
Lx[1]<-lx[2]+(0.045+2.684*mx[1])*dx[1]
}
}
Lx[111]<-dx[111]/mx[111]
Lx[2:110]<-lx[3:111]+0.5*dx[2:110]
if(Lx[1]>=lx[1]){
Lx[1]<-.3*lx[1]+.7*lx[2]}
Lx[is.nan(Lx)]<-0
Tx<-vector(length=length(px))
#otra forma
#Tx[111]<-Lx[111]
#for(i in 110:1){Tx[i]<-Lx[i]+T[i+1]}
Tx[1]<- sum(Lx)
for(i in 2:111){Tx[i]<-Tx[i-1]-Lx[i-1]}
ex<-Tx/lx
Sx<-vector(length=111)
Sx[1]<-Lx[1]/(2*lx[1])
Sx[111]<-Tx[111]/Tx[110]
for(i in 2:110){
Sx[i]=Lx[i]/Lx[i-1]
}
ex[is.nan(ex)]<-0
tabmort<-cbind(c(0:110),mx,qx,px,lx,dx,Lx,Tx,ex,Sx)
return(tabmort)
}
tablamort<-function(a,s){
Dx<- read.table("Deaths_1x1.txt", header=TRUE)
Ex<- read.table("Exposures_1x1.txt", header=TRUE)
D_x<-Dx[which(Dx$Year==a),c(1,2,s)]
E_x<-Ex[which(Ex$Year==a),c(1,2,s)]
#Dx<- read.table("Deaths_1x1.txt", header=TRUE)[(111*(a-1946)-110):(111*(a-1946)),s]
#Ex<- read.table("Exposures_1x1.txt", header=TRUE)[(111*(a-1946)-110):(111*(a-1946)),s]
mx<-D_x[,3]/E_x[,3]
mx[is.nan(mx)]<-0
qx<-2*mx/(2+mx)
for(i in 1:111){if(qx[i]>1){qx[i]<-1}}
if(s==3){
if (mx[1]>=0.107){qx[1]<-mx[1]/(1+(1-0.35)*mx[1])}
else {qx[1]<-(mx[1]/(1+((1-(0.053+(2.8*mx[1])))*mx[1])))}
}
else{
if (mx[1]>=0.107){qx[1]<-mx[1]/(1+(1-0.33)*mx[1])}
else {qx[1]<-mx[1]/(1+(1-(0.045+2.684*mx[1]))*mx[1])}
}
px<-1-qx
lx<-vector(length=length(px))
lx[1]<-100000
for(i in 2:111){
lx[i]<-lx[i-1]*px[i]
}
dx<-lx*qx
Lx<- vector(length=length(px))
if(s==3){
if (mx[1]>=0.107){
Lx[1]<-lx[2]+(0.35*dx[1])
} else{
Lx[1]<-lx[2]+(0.053+2.8*mx[1])*dx[1]
}
}
else{
if (mx[1]>=0.107){
Lx[1]<-lx[2]+(0.33*dx[1])
} else{
Lx[1]<-lx[2]+(0.045+2.684*mx[1])*dx[1]
}
}
Lx[111]<-dx[111]/mx[111]
Lx[2:110]<-lx[3:111]+0.5*dx[2:110]
if(Lx[1]>=lx[1]){
Lx[1]<-.3*lx[1]+.7*lx[2]}
Lx[is.nan(Lx)]<-0
Tx<-vector(length=length(px))
#otra forma
#Tx[111]<-Lx[111]
#for(i in 110:1){Tx[i]<-Lx[i]+T[i+1]}
Tx[1]<- sum(Lx)
for(i in 2:111){Tx[i]<-Tx[i-1]-Lx[i-1]}
ex<-Tx/lx
Sx<-vector(length=111)
Sx[1]<-Lx[1]/(2*lx[1])
Sx[111]<-Tx[111]/Tx[110]
for(i in 2:110){
Sx[i]=Lx[i]/Lx[i-1]
}
ex[is.nan(ex)]<-0
tabmort<-cbind(c(0:110),mx,qx,px,lx,dx,Lx,Tx,ex,Sx)
return(tabmort)
}
Swed2000<-tablamort(2000,3)
library("latticeExtra")
library("reshape2")
B          <-  seq(.5,47.5,.5)
FliesData  <-  read.table(file="flies.txt",header=T)
dir()
setwd()
Log.L <-  function(theta,x){
a   <-  theta[1]
b   <-  theta[2]
L.w <-  -(a/b+(a-1)*log(x/b)-(x/b)^a)
return(L.w)
}
opt.L.W <- optim(par = c(1,20), fn = Log.L, x = FData[,1])
B          <-  seq(.5,47.5,.5)
FliesData  <-  read.table(file="flies.txt",header=T)
Fig1f      <-  qplot(days, data = FliesData, geom = "histogram",breaks=B,ylab="Flies",
xlab="age-at-death",main="Complete Data")
previous_theme <- theme_set(theme_bw())
Fig1f
#2) Do you see two specific ages which could be considered coutliers if we intend to fit a Weibull
# distribution? If so, subset your data skipping such ages.
# And use such selection for the following tasks
#Yes, the first to ages at death
FData      <- subset(FliesData,days>2)
Fig2f      <- qplot(days, data = FData, geom = "histogram",breaks=B,ylab="Flies"
,xlab="age-at-death",main="Data without outliers")
previous_theme   <-  theme_set(theme_bw())
Fig2f
require(gridExtra)
pdf(file="Files_Hist.pdf",width=9,height=5,pointsize=4)
grid.arrange(Fig1f, Fig2f, ncol=2)
dev.off()
#3) Though R provides a function for computing a density of a Weibull distribution, write your own
Weib_d    <-  function(x,a,b){
D       <-  (a/b)*((x/b)^(a-1))
E       <-  exp(-(x/b)^a)
W       <-  D*E
return(W)
}
#4) Define the log-likelihood for the Weibull distribution and maximize it. Hints: a) remember
#that by default optim minimizes an objective function b) use the following starting value a=1 and b=20
Log.L <-  function(theta,x){
a   <-  theta[1]
b   <-  theta[2]
L.w <-  -(a/b+(a-1)*log(x/b)-(x/b)^a)
return(L.w)
}
library("reshape2")
B          <-  seq(.5,47.5,.5)
FliesData  <-  read.table(file="flies.txt",header=T)
Fig1f      <-  qplot(days, data = FliesData, geom = "histogram",breaks=B,ylab="Flies",
xlab="age-at-death",main="Complete Data")
previous_theme <- theme_set(theme_bw())
Fig1f
library("ggplot2")
B          <-  seq(.5,47.5,.5)
FliesData  <-  read.table(file="flies.txt",header=T)
Fig1f      <-  qplot(days, data = FliesData, geom = "histogram",breaks=B,ylab="Flies",
xlab="age-at-death",main="Complete Data")
previous_theme <- theme_set(theme_bw())
Fig1f
library("latticeExtra")
library("reshape2")
library("ggplot2")
B          <-  seq(.5,47.5,.5)
FliesData  <-  read.table(file="flies.txt",header=T)
dir()
setwd("/Users/josemanuelaf/Desktop/JM&TIM_beta")
library("spatstat")
Hexagon <- function (x, y, ...) {
xcoords <- c(-sqrt(3)/2,-sqrt(3)/2,0,sqrt(3)/2,sqrt(3)/2,0)
ycoords <- c(.5,-.5,-1,-.5,.5,1)
polygon(xcoords+x,ycoords+y,...)
}
ramp <- colorRampPalette(rev(RColorBrewer::brewer.pal(9,"OrRd")),space="Lab")
# matches using numeric codes. data must be a single year/sex, such that each state
# is only present once, and we use state numeric codes 1:32 to match to hexagons.
HexMex <- function(data,value.name = "e0",version = 3, breaks = NULL,
ramp = colorRampPalette(RColorBrewer::brewer.pal(9,"OrRd"),space="Lab"),
labels = TRUE,add=FALSE,...){
s3  <- sqrt(3)
s32 <- s3/2
# leave states in this code format, so it's easier to move hexagons around.
# this is just a first draft.
if (version == 1){
states <- data.frame(
x=c(1-s32-s3,1-s32,1+s32,1+s32+s3,           # row 1
1-s3,1,1+s3,1+2*s3,1+3*s3,           # row 2
1+s32,1+s32+s3,1+s32+2*s3,           # row 3
1+1*s3,1+2*s3,1+3*s3,                # row 4
1+s32+s3,1+s32+2*s3,1+s32+3*s3,1+s32+4*s3,1+s32+7*s3,   # row 5
1+2*s3,1+3*s3,1+4*s3,1+5*s3,1+6*s3,1+7*s3,1+8*s3,       # row 6
1+s32+2*s3,1+s32+3*s3,1+s32+4*s3,1+s32+5*s3,1+s32+6*s3  # row 7
),
y=c(8.5,8.5,8.5,8.5,                         # row 1
7,7,7,7,7,                           # row 2
5.5,5.5,5.5,                         # row 3
4,4,4,                               # row 4
2.5,2.5,2.5,2.5, 2.5,                # row 5
1,1,1,1,1,1,1,                       # row 6
-.5,-.5,-.5,-.5,-.5                  # row 7
),
name=c("BN","SO","CH","CA",                  # row 1
"BS","SI","DU","NL","TM",            # row 2
"NA","ZA","SL",                      # row 3
"JA","AG","QE",                      # row 4
"CL","GT","HI","VE", "YU",           # row 5
"MC","MX","DF","TL","TB","CM","QR",  # row 6
"GR","MR","PU","OA","CP"             # row 7
),value=NA)
}
if (version == 2){
states <- data.frame(
x=c(0:3 * s3,              # row 1
0:4*s3+s32,           # row 2
1:5*s3,7:8*s3,    # row 3
1:7*s3+s32,    # row 4
2:7*s3, # row 5
3:5*s3+s32         # row 6
),
y=c(    rep(7.5,4),                            # row 1
rep(6,5),                              # row 2
rep(4.5,7),                            # row 3
rep(3,7),	                           # row 4
rep(1.5,6),	                           # row 5
rep(0,3)                               # row 6
),
name=c("BN","SO","CH","CA",                             # row 1
"BS","SI","DU","NL","TM",                      # row 2
"NA","ZA","SL","HI","VE",    "YU","QR",      # row 3
"JA","AG","GT","QE","TL","TB","CM",        # row 4
"CL","MX","DF","MR","PU","CP",           # row 5
"MC","GR","OA"                         # row 6
),value=NA)
}
if (version == 3){
states <- data.frame(
x=c(0:3 * s3,              # row 1
-1:3*s3+s32,           # row 2
0:4*s3,7:8*s3,    # row 3
0:7*s3+s32,    # row 4
2:7*s3, # row 5
3:4*s3+s32         # row 6
),
y=c(    rep(7.5,4),                            # row 1
rep(6,5),                              # row 2
rep(4.5,7),                            # row 3
rep(3,8),	                           # row 4
rep(1.5,6),	                           # row 5
rep(0,2)                               # row 6
),
name=c("BCN","SON","CHH","COA",                             # row 1
"BCS","SIN","DUR","NL","TAM",                      # row 2
"NAY","ZAC","SLP","QUE","HID",     "YUC","QROO",      # row 3
"JAL","AGU","GUA","DF","TLA","VER","TAB","CAM",        # row 4
"COL","MEX","MOR","PUE","OAX","CHP",           # row 5
"MIC","GRO"                         # row 6
),value=NA)
}
# this just needed to be coded once.
StatesLookup <- structure(list(Name = c("Aguascalientes", "Baja California",
"Baja California Sur", "Campeche", "Coahuila", "Colima", "Chiapas",
"Chihuahua", "Distrito Federal", "Durango", "Guanajuato", "Guerrero",
"Hidalgo", "Jalisco", "México", "Michoacán", "Morelos", "Nayarit",
"Nuevo León", "Oaxaca", "Puebla", "Querétaro", "Quintana Roo",
"San Luis Potosí", "Sinaloa", "Sonora", "Tabasco", "Tamaulipas",
"Tlaxcala", "Veracruz", "Yucatán", "Zacatecas"), lettercode = c("AG",
"BN", "BS", "CM", "CA", "CL", "CP", "CH", "DF", "DU", "GT", "GR",
"HI", "JA", "MX", "MC", "MR", "NA", "NL", "OA", "PU", "QE", "QR",
"SL", "SI", "SO", "TB", "TM", "TL", "VE", "YU", "ZA"), code = 1:32,
Name3 = c("AGU", "BCN", "BCS", "CAM",  "COA", "COL","CHP",
"CHH", "DF", "DUR", "GUA", "GRO", "HID", "JAL", "MEX", "MIC",
"MOR", "NAY", "NL", "OAX", "PUE", "QUE", "QROO", "SLP", "SIN",
"SON", "TAB", "TAM", "TLA", "VER", "YUC", "ZAC")), .Names = c("Name",
"lettercode", "code", "Name3"), row.names = c("AGU", "BCN", "BCS", "CAM",  "COA", "COL","CHP",
"CHH", "DF", "DUR", "GUA", "GRO", "HID", "JAL", "MEX", "MIC",
"MOR", "NAY", "NL", "OAX", "PUE", "QUE", "QROO", "SLP", "SIN",
"SON", "TAB", "TAM", "TLA", "VER", "YUC", "ZAC"), class = "data.frame")
states$Name      <- StatesLookup[states$name,"Name"]
states$code      <- StatesLookup[states$name,"code"]
rownames(states) <- states$code
# OK, now data can be matched.
# data <- as.data.frame(ste0_14)[ste0_14$Sex==1&ste0_14$Year == 2008,]
rownames(data) <- data$State
states$value   <- data[rownames(states),value.name]
if (is.null(breaks)){
breaks <- pretty(states$value,n=10)
}
states$color <- as.character(cut(states$value,breaks=breaks,labels=ramp(length(breaks)-1)))
states$labcol<- ifelse(colorspace::hex2RGB(to.grey(states$color))@coords[, 1] < .5,gray(.9),gray(.3))
if (!add){
xlim <- range(states$x) + c(-.5,.5)
ylim <- range(states$y) + c(-.5,.5)
plot(NULL, type = "n", xlim = xlim, ylim = ylim,asp=1)
}
# this avoids errors if per chance we only want the states object back.
if (length(dev.list()) > 0){
for (i in 1:nrow(states)){
Hexagon(states$x[i],states$y[i],col = states$color[i], border = "white")
if (labels){
text(states$x[i],states$y[i],states$name[i],col=states$labcol[i])
}
# labels = TRUE
}
}
invisible(states)
}
#if (system("hostname",intern=TRUE) %in% c("triffe-N80Vm", "tim-ThinkPad-L440")){
# if I'm on the laptop
#	setwd("/home/tim/git/DecompMex/DecompMex")
#} else {
# in that case I'm on Berkeley system, and other people in the dept can run this too
#	setwd(paste0("/data/commons/",system("whoami",intern=TRUE),"/git/DecompMex/DecompMex"))
#}
library(data.table)
library(reshape2)
source("R/Functions.R")
source("R/LTuniform.R")
# load in data made in DataPrep.R
source("R/1_CalculateBPe0etc.R")
head(ste0_14)
data <- as.data.frame(ste40_74)[ste40_74$Sex==1&ste40_74$Year == 2008,]
rownames(data) <- data$State
HexMex(data, version =3)
head(ste0_14)
setwd("/Users/josemanuelaf/Desktop/JM&TIM_beta/Data")
library(latticeExtra)
dir()
###### for ages 0 - 14 ##############################################################
#####################################################################################
### For females
DecomF0_14 <- local(get(load("ContribFemales0_14.Rdata")))
DF0_14 <- NULL
require(reshape2)
for( i in 1:21){
D        <- do.call(rbind.data.frame,DecomF0_14[[i]])
D$Age    <- seq(0,75,1)
D$State  <- rep(1:32, each=76)
D        <- subset(D, Age< 15)
D1       <- aggregate(x = D, by = list(D$State), FUN = sum)
D1       <- D1[1:11]
D2       <- melt(as.data.frame(D1), id="Group.1")
D3       <- as.data.frame(cbind(Year= i+1989,State=D2$Group.1, AMCategory = D2$variable, Contribution = D2$value))
DF0_14   <- as.data.frame(rbind(DF0_14, D3))
}
## Data frame with results for females
## For males
DecomM0_14 <- local(get(load("ContribMales0_14.Rdata")))
DM0_14 <- NULL
for( i in 1:21){
D        <- do.call(rbind.data.frame,DecomM0_14[[i]])
D$Age    <- seq(0,75,1)
D$State  <- rep(1:32, each=76)
D        <- subset(D, Age< 15)
D1       <- aggregate(x = D, by = list(D$State), FUN = sum)
D1       <- D1[1:11]
D2       <- melt(as.data.frame(D1), id="Group.1")
D3       <- as.data.frame(cbind(Year= i+1989,State=D2$Group.1, AMCategory = D2$variable, Contribution = D2$value))
DM0_14   <- as.data.frame(rbind(DM0_14, D3))
}
## Data frame with results for males
#####################################################################################
###### for ages 15 - 39 ##############################################################
#####################################################################################
### For females
DecomF15_39 <- local(get(load("ContribFemales15_39.Rdata")))
DF15_39 <- NULL
for( i in 1:21){
D        <- do.call(rbind.data.frame,DecomF15_39[[i]])
D$Age    <- seq(0,75,1)
D$State  <- rep(1:32, each=76)
D        <- subset(D, Age > 14 & Age < 40)
D1       <- aggregate(x = D, by = list(D$State), FUN = sum)
D1       <- D1[1:11]
D2       <- melt(as.data.frame(D1), id="Group.1")
D3       <- as.data.frame(cbind(Year= i+1989,State=D2$Group.1, AMCategory = D2$variable, Contribution = D2$value))
DF15_39   <- as.data.frame(rbind(DF15_39, D3))
}
## Data frame with results for females
## For males
DecomM15_39 <- local(get(load("ContribMales15_39.Rdata")))
DM15_39 <- NULL
for( i in 1:21){
D        <- do.call(rbind.data.frame,DecomM15_39[[i]])
D$Age    <- seq(0,75,1)
D$State  <- rep(1:32, each=76)
D        <- subset(D, Age > 14 & Age < 40)
D1       <- aggregate(x = D, by = list(D$State), FUN = sum)
D1       <- D1[1:11]
D2       <- melt(as.data.frame(D1), id="Group.1")
D3       <- as.data.frame(cbind(Year= i+1989,State=D2$Group.1, AMCategory = D2$variable, Contribution = D2$value))
DM15_39   <- as.data.frame(rbind(DM15_39, D3))
}
## Data frame with results for males
#####################################################################################
###### for ages 40 - 74 ##############################################################
#####################################################################################
### For females
DecomF40_74 <- local(get(load("ContribFemales40_74.Rdata")))
DF40_74 <- NULL
for( i in 1:21){
D        <- do.call(rbind.data.frame,DecomF40_74[[i]])
D$Age    <- seq(0,75,1)
D$State  <- rep(1:32, each=76)
D        <- subset(D, Age > 39 & Age < 74)
D1       <- aggregate(x = D, by = list(D$State), FUN = sum)
D1       <- D1[1:11]
D2       <- melt(as.data.frame(D1), id="Group.1")
D3       <- as.data.frame(cbind(Year= i+1989,State=D2$Group.1, AMCategory = D2$variable, Contribution = D2$value))
DF40_74   <- as.data.frame(rbind(DF40_74, D3))
}
## Data frame with results for females
## For males
DecomM40_74 <- local(get(load("ContribMales40_74.Rdata")))
DM40_74 <- NULL
for( i in 1:21){
D        <- do.call(rbind.data.frame,DecomM40_74[[i]])
D$Age    <- seq(0,75,1)
D$State  <- rep(1:32, each=76)
D        <- subset(D, Age > 39 & Age < 74)
D1       <- aggregate(x = D, by = list(D$State), FUN = sum)
D1       <- D1[1:11]
D2       <- melt(as.data.frame(D1), id="Group.1")
D3       <- as.data.frame(cbind(Year= i+1989,State=D2$Group.1, AMCategory = D2$variable, Contribution = D2$value))
DM40_74   <- as.data.frame(rbind(DM40_74, D3))
}
## Data frame with results for males
gdata::keep(DF0_14,DM0_14,DF15_39,DM15_39,DF40_74,DM40_74,sure=T)
#####################################################################################
#####################################################################################
#####################################################################################
#Start Graph analysis################################################################
#####################################################################################
#1.Causes amenable to medical service
#2.Diabetes
#3.Ischemic heart diseases
#4.HIV/AIDS
#5.Lung cancer
#6.Cirrhosis
#7.Homicide
#8.Road traffic accidents
#9.Suicide
#10.Other causes
#####################################################################################
####graphs parameters
my.settings <- list(
strip.background=list(col="grey"),
strip.border=list(col="black"),
auto.key = F
)
makeTransparent<-function(someColor, alpha=100)
{
newColor<-col2rgb(someColor)
apply(newColor, 2, function(curcoldata){rgb(red=curcoldata[1], green=curcoldata[2],
blue=curcoldata[3],alpha=alpha, maxColorValue=255)})
}
#####################################################################################
DM0_14$AMLabel <- factor(DM0_14$AMCategory,levels=c(1:10),labels=c("AMS","Diabetes","IHD","HIV","Lung cancer","Cirrhosis","Homicide","RTA","Suicide","RC"))
DF0_14$AMLabel <- factor(DF0_14$AMCategory,levels=c(1:10),labels=c("AMS","Diabetes","IHD","HIV","Lung cancer","Cirrhosis","Homicide","RTA","Suicide","RC"))
DF15_39$AMLabel <- factor(DF15_39$AMCategory,levels=c(1:10),labels=c("AMS","Diabetes","IHD","HIV","Lung cancer","Cirrhosis","Homicide","RTA","Suicide","RC"))
DM15_39$AMLabel <- factor(DM15_39$AMCategory,levels=c(1:10),labels=c("AMS","Diabetes","IHD","HIV","Lung cancer","Cirrhosis","Homicide","RTA","Suicide","RC"))
DF40_74$AMLabel <- factor(DF40_74$AMCategory,levels=c(1:10),labels=c("AMS","Diabetes","IHD","HIV","Lung cancer","Cirrhosis","Homicide","RTA","Suicide","RC"))
DM40_74$AMLabel <- factor(DM40_74$AMCategory,levels=c(1:10),labels=c("AMS","Diabetes","IHD","HIV","Lung cancer","Cirrhosis","Homicide","RTA","Suicide","RC"))
data <- as.data.frame(DM0_14)[DM0_14$Year == 1990,]
data
data <- as.data.frame(DM0_14)[DM0_14$Year == 1990 & DM0_14$AMCategory == 7,]
rownames(data) <- data$State
HexMex(data, version =3)
source("R/HexTest")
dir()
